[{"C:\\Егор\\работа\\programming\\progr\\projects\\bot-client\\botClientSite\\botsite\\src\\index.js":"1","C:\\Егор\\работа\\programming\\progr\\projects\\bot-client\\botClientSite\\botsite\\src\\App.js":"2","C:\\Егор\\работа\\programming\\progr\\projects\\bot-client\\botClientSite\\botsite\\src\\reportWebVitals.js":"3","C:\\Егор\\работа\\programming\\progr\\projects\\bot-client\\botClientSite\\botsite\\src\\routes.js":"4","C:\\Егор\\работа\\programming\\progr\\projects\\bot-client\\botClientSite\\botsite\\src\\pages\\AuthPage\\index.js":"5","C:\\Егор\\работа\\programming\\progr\\projects\\bot-client\\botClientSite\\botsite\\src\\hooks\\auth.hook.js":"6","C:\\Егор\\работа\\programming\\progr\\projects\\bot-client\\botClientSite\\botsite\\src\\context\\AuthContext.js":"7","C:\\Егор\\работа\\programming\\progr\\projects\\bot-client\\botClientSite\\botsite\\src\\components\\NavComponent\\index.js":"8","C:\\Егор\\работа\\programming\\progr\\projects\\bot-client\\botClientSite\\botsite\\src\\hooks\\http.hook.js":"9","C:\\Егор\\работа\\programming\\progr\\projects\\bot-client\\botClientSite\\botsite\\src\\pages\\ChatsPage\\index.js":"10","C:\\Егор\\работа\\programming\\progr\\projects\\bot-client\\botClientSite\\botsite\\src\\pages\\ChatPage\\index.js":"11"},{"size":399,"mtime":1608559964727,"results":"12","hashOfConfig":"13"},{"size":599,"mtime":1608558984154,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":499162500000,"results":"15","hashOfConfig":"13"},{"size":700,"mtime":1608569950876,"results":"16","hashOfConfig":"13"},{"size":1774,"mtime":1608561045548,"results":"17","hashOfConfig":"13"},{"size":708,"mtime":1608556659239,"results":"18","hashOfConfig":"13"},{"size":175,"mtime":1608558712336,"results":"19","hashOfConfig":"13"},{"size":530,"mtime":1608561408633,"results":"20","hashOfConfig":"13"},{"size":211,"mtime":1608573057467,"results":"21","hashOfConfig":"13"},{"size":1098,"mtime":1608566231583,"results":"22","hashOfConfig":"13"},{"size":2188,"mtime":1608572614068,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"d27z90",{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"26"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"26"},"C:\\Егор\\работа\\programming\\progr\\projects\\bot-client\\botClientSite\\botsite\\src\\index.js",[],["53","54"],"C:\\Егор\\работа\\programming\\progr\\projects\\bot-client\\botClientSite\\botsite\\src\\App.js",["55"],"import logo from './logo.svg';\nimport './App.css';\nimport { useRoutes } from './routes';\nimport { useAuth } from './hooks/auth.hook';\n\nimport { AuthContext } from './context/AuthContext';\n\nimport { NavComponent } from './components/NavComponent/index';\n\nfunction App() {\n  const routes = useRoutes();\n  const {token, login, logout} = useAuth();\n  const isAuth = !!token;\n  return (\n    <AuthContext.Provider value={{\n      login, logout, token, isAuth\n    }} >\n      <div className=\"App\">\n        <NavComponent/>\n        {routes}\n      </div>\n    </AuthContext.Provider>\n  );\n}\n\nexport default App;\n","C:\\Егор\\работа\\programming\\progr\\projects\\bot-client\\botClientSite\\botsite\\src\\reportWebVitals.js",[],"C:\\Егор\\работа\\programming\\progr\\projects\\bot-client\\botClientSite\\botsite\\src\\routes.js",["56"],"import React, { useContext } from 'react';\r\nimport { Redirect, Route } from 'react-router-dom';\r\nimport { AuthContext } from './context/AuthContext';\r\n\r\nimport { AuthPage } from './pages/AuthPage/index';\r\nimport { ChatsPage } from './pages/ChatsPage/index';\r\nimport { ChatPage } from './pages/ChatPage/index';\r\n\r\nexport const useRoutes = () => {\r\n    const { isAuth } = useContext(AuthContext);\r\n    return(\r\n        <>\r\n            { isAuth == false ? <Redirect to=\"/auth\"/> : <Redirect to=\"/chats\"/> }\r\n            <Route path=\"/auth\" component={AuthPage}/>\r\n            <Route path=\"/chats\" component={ChatsPage}/>\r\n            <Route path=\"/chat/:id\" component={ChatPage}/>\r\n        </>\r\n    )\r\n}","C:\\Егор\\работа\\programming\\progr\\projects\\bot-client\\botClientSite\\botsite\\src\\pages\\AuthPage\\index.js",[],"C:\\Егор\\работа\\programming\\progr\\projects\\bot-client\\botClientSite\\botsite\\src\\hooks\\auth.hook.js",["57"],"import React, { useState, useCallback, useEffect } from 'react';\r\n\r\nconst storageName = 'userData';\r\n\r\n\r\nexport const useAuth = () => {\r\n    const [token, setToken] = useState(null);\r\n\r\n    const login = useCallback((jwtToken) => {\r\n        setToken(jwtToken);\r\n\r\n        localStorage.setItem(storageName, JSON.stringify({token: jwtToken}));\r\n    }, [])\r\n    const logout = useCallback(() => {\r\n        setToken(null);\r\n        localStorage.removeItem(storageName);\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        const data = JSON.parse(localStorage.getItem(storageName));\r\n\r\n        if(data && data.token){\r\n            login(data.token);\r\n        }\r\n    }, [login]);\r\n\r\n    return {login, logout, token};\r\n}","C:\\Егор\\работа\\programming\\progr\\projects\\bot-client\\botClientSite\\botsite\\src\\context\\AuthContext.js",[],"C:\\Егор\\работа\\programming\\progr\\projects\\bot-client\\botClientSite\\botsite\\src\\components\\NavComponent\\index.js",[],"C:\\Егор\\работа\\programming\\progr\\projects\\bot-client\\botClientSite\\botsite\\src\\hooks\\http.hook.js",["58"],"import React from 'react';\r\n\r\nexport const request = async (url, object = {}) => {\r\n    let _url = `http://botclientapi.dobbikov.ga${url}`;\r\n    const request = await fetch(_url, object);\r\n    return request;\r\n}","C:\\Егор\\работа\\programming\\progr\\projects\\bot-client\\botClientSite\\botsite\\src\\pages\\ChatsPage\\index.js",["59","60"],"import React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { request } from '../../hooks/http.hook';\r\nimport './style.css';\r\n\r\nexport const ChatsPage = () => {\r\n    const [load, setLoad] = useState(false);\r\n    const [data, setData] = useState([]);\r\n\r\n    useEffect(async () => {\r\n        const req = await request('/api/Chats', {method: 'GET', headers: {'Content-Types': 'application/json'}});\r\n        const res = await req.json();\r\n        if(req.ok === true)\r\n        {\r\n            setLoad(true);\r\n            setData(res);\r\n        }\r\n    }, [])\r\n\r\n    if(load == false)\r\n        return( <h1 className=\"loading\">Loading...</h1> )\r\n    return(\r\n        <div className=\"pages\">\r\n            <div className=\"container\">\r\n                {data.map(chat => \r\n                    <Link to={`/chat/${chat.telegramid}`} key={chat.id} className=\"chat\">\r\n                        <p>{chat.telegramid < 0 ? chat.username : \"\"} {chat.firstname} {chat.lastname}</p>\r\n                    </Link>   \r\n                )}\r\n            </div>\r\n        </div>\r\n    )\r\n}","C:\\Егор\\работа\\programming\\progr\\projects\\bot-client\\botClientSite\\botsite\\src\\pages\\ChatPage\\index.js",["61","62","63"],"import React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { request } from '../../hooks/http.hook';\r\nimport './style.css';\r\n\r\nexport const ChatPage = () => {\r\n    const [load, setLoad] = useState(false);\r\n    const [data, setData] = useState([]);\r\n    const [message, setMessage] = useState(\"\");\r\n    const idx = useParams().id;\r\n\r\n    const populateMessages = async () => {\r\n        const req = await request(`/api/Messages/ByChatId/${idx}`, {method: 'GET', headers: {'Content-Type': 'application/json'}});\r\n        const res = await req.json();\r\n        if(req.ok === true){\r\n            setLoad(true);\r\n            setData(res);\r\n        }\r\n    }\r\n\r\n    const messageChangeHandler = event => {\r\n        setMessage(event.target.value);\r\n    }\r\n    const mymessClickHandler = async event => {\r\n        const req = await request('/api/Messages', {method: 'POST', body: JSON.stringify({\"Telegramchatid\": Number(idx), \"Text\": message, \"Telegramuserid\": 1495033650}), headers: {'Content-Type': 'application/json'}});\r\n        const res = await req.json();\r\n        if(req.ok === true)\r\n            await populateMessages();\r\n        setMessage(\"\");\r\n    }\r\n\r\n    useEffect(async () => {\r\n        await populateMessages();\r\n    }, []);\r\n    if(load === false)\r\n        return( <h1>Loading...</h1>)\r\n    \r\n    return (\r\n        <div className=\"pages\">\r\n            <div className=\"container\">\r\n                <div className=\"messages\">\r\n                    {data.map(mess =>\r\n                        <div className={mess.telegramuserid === 1495033650 ? \"you mess\" : \"not-you mess\"} key={mess.id}>\r\n                            <p className=\"names\">{mess.firstname} {mess.lastname}</p>\r\n                            <p>{mess.text}</p>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n                <div className=\"inputs\">\r\n                    <input type=\"text\" onChange={messageChangeHandler} value={message} className=\"inputs-mess\"/><input type=\"submit\" value=\"Отправить\" className=\"inputs-submit\" onClick={mymessClickHandler}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n",{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","severity":1,"message":"69","line":1,"column":8,"nodeType":"70","messageId":"71","endLine":1,"endColumn":12},{"ruleId":"72","severity":1,"message":"73","line":13,"column":22,"nodeType":"74","messageId":"75","endLine":13,"endColumn":24},{"ruleId":"68","severity":1,"message":"76","line":1,"column":8,"nodeType":"70","messageId":"71","endLine":1,"endColumn":13},{"ruleId":"68","severity":1,"message":"76","line":1,"column":8,"nodeType":"70","messageId":"71","endLine":1,"endColumn":13},{"ruleId":"77","severity":1,"message":"78","line":10,"column":15,"nodeType":"79","endLine":18,"endColumn":6},{"ruleId":"72","severity":1,"message":"73","line":20,"column":13,"nodeType":"74","messageId":"75","endLine":20,"endColumn":15},{"ruleId":"68","severity":1,"message":"80","line":26,"column":15,"nodeType":"70","messageId":"71","endLine":26,"endColumn":18},{"ruleId":"77","severity":1,"message":"78","line":32,"column":15,"nodeType":"79","endLine":34,"endColumn":6},{"ruleId":"77","severity":1,"message":"81","line":34,"column":8,"nodeType":"82","endLine":34,"endColumn":10,"suggestions":"83"},"no-native-reassign",["84"],"no-negated-in-lhs",["85"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'React' is defined but never used.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","'res' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'populateMessages'. Either include it or remove the dependency array.","ArrayExpression",["86"],"no-global-assign","no-unsafe-negation",{"desc":"87","fix":"88"},"Update the dependencies array to be: [populateMessages]",{"range":"89","text":"90"},[1276,1278],"[populateMessages]"]